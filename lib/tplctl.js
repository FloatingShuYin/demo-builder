// Generated by CoffeeScript 1.9.3

/*
 * tpl模板构建和压缩模块
 */
var Tools, _, _buildHtml, _replaceImg, _staticPath, color, fs, gulp, gutil, imgPathReg, imgReg, include, path, plumber, setting, srcReg, tplCtl;

fs = require('fs');

path = require('path');

_ = require('lodash');

gulp = require('gulp');

plumber = require('gulp-plumber');

gutil = require('gulp-util');

color = gutil.colors;

setting = require('./setting');

include = require('./include');

Tools = require('./Tools');

_staticPath = setting.staticPath;

imgReg = /<img[\s\S]*?[^(src)]src=('|")\{\{staticPath\}\}([^'|^"]*)('|")/g;

srcReg = /src=('|")([^'|^"]*)('|")/;

imgPathReg = '{{staticPath}}/img/';

_replaceImg = function(source) {
  var file_source, imgMap;
  imgMap = Tools.getImgMap();
  file_source = source.replace(imgReg, function(str) {
    var _str, key, map, val;
    if (str.indexOf('{{staticPath}}') === -1) {
      return str;
    }
    map = '';
    str.replace(srcReg, function(ss) {
      return map = ss.replace(/src=/, '').replace(/(\'|\")|(\'|\"$)/g, '');
    });
    key = map.replace(imgPathReg, '');
    val = _staticPath + '/img/' + (_.has(imgMap, key) && setting.env !== 'dev' ? imgMap[key].distname : key + '?t=' + String(new Date().getTime()).substr(0, 8));
    console.log(map + "--> " + val);
    _str = str.replace(map, val);
    return _str;
  });
  return file_source;
};

_buildHtml = function(data) {
  var _name, _outPath, _path, _source;
  _path = String(data.path).replace(/\\/g, '/');
  if (_path.indexOf(setting.tplPath + "_") > -1) {
    return false;
  }
  _name = _path.split(setting.tplPath)[1];
  _outPath = path.join(setting.root, setting.tplOutPath, _name);
  _source = String(data.contents);
  _source = _replaceImg(_source);
  if (setting.env !== 'dev' && setting.isMinify) {
    _source = Tools.htmlMinify(_source);
  }
  Tools.mkdirsSync(path.dirname(_outPath));
  fs.writeFileSync(_outPath, _source, 'utf8');
  return gutil.log(color.cyan("'" + _name + "'"), "combined.");
};

tplCtl = function(file, cb) {
  var _hashMaps;
  _hashMaps = Tools.getHashMaps();
  gutil.log(color.yellow("Combine html templates..."));
  return gulp.src(file).pipe(plumber({
    errorHandler: Tools.errHandler
  })).pipe(include({
    hashmap: _hashMaps
  })).on("data", function(res) {
    var e;
    try {
      return _buildHtml(res);
    } catch (_error) {
      e = _error;
      console.log(res.path + " Error--->");
      return console.log(e);
    }
  }).on("end", function() {
    gutil.log(color.green("Html templates done!"));
    return cb();
  });
};

module.exports = tplCtl;
