// Generated by CoffeeScript 1.9.3
var Buffer, Imagemin, Server, Tools, Watch, _, build, color, cssCtl, fs, gulp, gutil, include, jsCtl, less, path, plumber, setting, tplCtl,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('fs');

path = require('path');

_ = require('lodash');

gulp = require('gulp');

gutil = require('gulp-util');

less = require('gulp-less');

plumber = require('gulp-plumber');

Watch = require('gulp-watch');

Server = require('gulp-server-livereload');

Buffer = require('buffer').Buffer;

Imagemin = require('imagemin');

include = require('./include');

setting = require('./setting');

Tools = require('./Tools');

cssCtl = require('./cssctl');

jsCtl = require('./jsctl');

tplCtl = require('./tplctl');

color = gutil.colors;

build = {
  init: function() {
    var dir, i, init_paths, len;
    init_paths = [setting.distPath, setting.srcPath, setting.tplOutPath, setting.cssPath, setting.lessPath, setting.jsPath, setting.imgPath, setting.tplPath, setting.mapPath];
    for (i = 0, len = init_paths.length; i < len; i++) {
      dir = init_paths[i];
      Tools.mkdirsSync(dir);
      gutil.log(dir + " made success!");
    }
    return gutil.log(color.green("Project init success!"));
  },
  less2css: function(cb) {
    var _file, _lessPath;
    _lessPath = setting.lessPath;
    _file = [path.join(_lessPath, '*.less'), "!" + (path.join(_lessPath, '_*.less'))];
    return gulp.src(_file).pipe(plumber({
      errorHandler: Tools.errrHandler
    })).pipe(less({
      compress: false,
      paths: [_lessPath]
    })).pipe(gulp.dest(setting.cssPath)).on('end', function() {
      return cb && cb();
    });
  },
  img2dist: function(cb) {
    return Tools.imgHash(function() {
      return cb && cb();
    });
  },
  css2dist: function(file, cb) {
    var _cb, _file;
    _file = setting.cssPath + "**/*.css";
    if (typeof file === 'function') {
      _cb = file;
    } else {
      _file = file || _file;
      _cb = cb || function() {};
    }
    return cssCtl(_file, _cb);
  },
  tpl2dist: function(file, cb) {
    var _cb, _file;
    _file = setting.tplPath + "**/*.html";
    if (typeof file === 'function') {
      _cb = file;
    } else {
      _file = file || _file;
      _cb = cb || function() {};
    }
    return tplCtl(_file, _cb);
  },
  js2dist: function(file, cb) {
    var _cb, _file;
    _file = setting.jsPath + "**/*.js";
    if (typeof file === 'function') {
      _cb = file;
    } else {
      _file = file || _file;
      _cb = cb || function() {};
    }
    return jsCtl(_file, _cb);
  },
  watch: function() {
    var _list, _this;
    _this = this;
    _list = [];
    return Watch(setting.watchFiles, function(file) {
      var _event, _file_path, _type, err, watch_timer;
      try {
        _event = file.event;
        if (_event !== 'undefined') {
          _file_path = file.path.replace(/\\/g, '/');
          if (indexOf.call(_list, _file_path) < 0) {
            _list.push(_file_path);
            gutil.log('\'' + color.cyan(file.relative) + '\'', "was " + _event);
            _type = Tools.getType(_file_path);
            switch (_type) {
              case 'less':
                _this.less2css();
                break;
              case 'img':
                _this.img2dist();
                break;
              case 'css':
                _this.css2dist(_file_path);
                break;
              case 'js':
                _this.js2dist(_file_path);
                break;
              case 'tpl':
                _this.tpl2dist(_file_path);
            }
          }
        }
        if (watch_timer) {
          clearTimeout(watch_timer);
        }
        return watch_timer = setTimeout(function() {
          return _list = [];
        }, 3000);
      } catch (_error) {
        err = _error;
        return console.log(err);
      }
    });
  },
  server: function() {
    var appPath;
    appPath = setting.root;
    return gulp.src(appPath).pipe(Server({
      livereload: false,
      directoryListing: true,
      open: true,
      host: setting.host,
      port: setting.port
    }));
  }
};

module.exports = build;
